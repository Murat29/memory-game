{"version":3,"sources":["utils/constants.js","redux/cardsSlice.js","redux/timerSlice.js","redux/appSlice.js","redux/gameParamsSlice.js","redux/resultsSlice.js","redux/rootReducer.js","utils/msToTime.js","components/Card/Card.js","components/Button/Button.js","images/white-cross.svg","components/Popup/Popup.js","components/ResultPopup/ResultPopup.js","components/WinPopup/WinPopup.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["emojiArray","initialState","cards","Array","length","cardsDisabled","cardsSlice","createSlice","name","reducers","updataCards","state","action","payload","showCard","show","hideCards","forEach","index","disableAllCards","enableAllCards","actions","timerSlice","pastTime","updataPastime","appSlice","isOpenResultPopup","isOpenWinPopup","openResultPopup","closeResultPopup","openWinPopup","closeWinPopup","gameParamsSlice","verifiableСard","numberMatches","increaseNumberMatches","updataVerifiableCard","cleareGameParams","results","time","sort","a","b","resultsSlice","addToResults","push","rootReducer","combineReducers","app","gameParams","timer","store","configureStore","reducer","msToTime","duration","seconds","parseInt","minutes","Card","value","disabled","handleCardClick","type","onClick","className","draggable","Button","props","isSmallTitle","title","Popup","isOpen","src","whiteСross","alt","close","children","ResultPopup","useSelector","dispatch","useDispatch","map","data","i","WinPopup","React","useState","setName","closePopup","onChange","e","target","placeholder","maxLength","trim","App","intervalTime","setIntervalTime","cardHideTimer","setCardHideTimer","clearTimeout","clearInterval","setTimeout","newCardHideTimer","dataCard","key","arr","j","temp","doubledArray","concat","nanoid","Math","floor","random","getArrayToDraw","startDate","Date","newIntervalTime","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10fd77e4.chunk.js","sourcesContent":["export const emojiArray = [\r\n  '🔥',\r\n  '🧡',\r\n  '👹',\r\n  '🍗',\r\n  '🍒',\r\n  '🚀',\r\n  '🐵',\r\n  '🦄',\r\n  '🌕',\r\n  '🐞',\r\n  '🏆',\r\n  '🌞',\r\n  '😀',\r\n  '💚',\r\n  '🦀',\r\n  '🐟',\r\n  '🐊',\r\n  '🌷',\r\n];\r\n\r\nexport const results = [\r\n  { name: 'Ходжатов Акмурат', time: 113010 },\r\n  { name: 'Билл Гейтс', time: 130010 },\r\n  { name: 'Илон Маск', time: 121160 },\r\n];\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { emojiArray } from '../utils/constants';\r\n\r\nconst initialState = {\r\n  cards: [...Array(emojiArray.length * 2)],\r\n  cardsDisabled: true,\r\n};\r\n\r\nconst cardsSlice = createSlice({\r\n  name: 'cards',\r\n  initialState: initialState,\r\n  reducers: {\r\n    updataCards(state, action) {\r\n      state.cards = action.payload;\r\n    },\r\n    showCard(state, action) {\r\n      state.cards[action.payload].show = true;\r\n    },\r\n    hideCards(state, action) {\r\n      action.payload.forEach((index) => (state.cards[index].show = false));\r\n    },\r\n    disableAllCards(state) {\r\n      state.cardsDisabled = true;\r\n    },\r\n    enableAllCards(state) {\r\n      state.cardsDisabled = false;\r\n    },\r\n  },\r\n});\r\nexport default cardsSlice.reducer;\r\nexport const { updataCards, showCard, hideCards, disableAllCards, enableAllCards } =\r\n  cardsSlice.actions;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  pastTime: '0',\r\n};\r\n\r\nconst timerSlice = createSlice({\r\n  name: 'timer',\r\n  initialState: initialState,\r\n  reducers: {\r\n    updataPastime(state, action) {\r\n      state.pastTime = action.payload;\r\n    },\r\n  },\r\n});\r\nexport default timerSlice.reducer;\r\nexport const { updataPastime } = timerSlice.actions;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  isOpenResultPopup: false,\r\n  isOpenWinPopup: false,\r\n};\r\n\r\nconst appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: initialState,\r\n  reducers: {\r\n    openResultPopup(state) {\r\n      state.isOpenResultPopup = true;\r\n    },\r\n    closeResultPopup(state) {\r\n      state.isOpenResultPopup = false;\r\n    },\r\n    openWinPopup(state) {\r\n      state.isOpenWinPopup = true;\r\n    },\r\n    closeWinPopup(state) {\r\n      state.isOpenWinPopup = false;\r\n    },\r\n  },\r\n});\r\nexport default appSlice.reducer;\r\nexport const { openResultPopup, closeResultPopup, openWinPopup, closeWinPopup } = appSlice.actions;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  verifiableСard: null,\r\n  numberMatches: 0,\r\n};\r\n\r\nconst gameParamsSlice = createSlice({\r\n  name: 'gameParams',\r\n  initialState: initialState,\r\n  reducers: {\r\n    increaseNumberMatches(state) {\r\n      state.numberMatches++;\r\n    },\r\n    updataVerifiableCard(state, action) {\r\n      state.verifiableСard = action.payload;\r\n    },\r\n    cleareGameParams(state) {\r\n      state.verifiableСard = null;\r\n      state.numberMatches = 0;\r\n    },\r\n  },\r\n});\r\nexport default gameParamsSlice.reducer;\r\nexport const { increaseNumberMatches, updataVerifiableCard, cleareGameParams } =\r\n  gameParamsSlice.actions;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { results } from '../utils/constants';\r\n\r\nconst initialState = {\r\n  results: results.sort((a, b) => a.time - b.time),\r\n};\r\n\r\nconst resultsSlice = createSlice({\r\n  name: 'results',\r\n  initialState: initialState,\r\n  reducers: {\r\n    addToResults(state, action) {\r\n      state.results.push(action.payload);\r\n      state.results.sort((a, b) => a.time - b.time);\r\n    },\r\n  },\r\n});\r\nexport default resultsSlice.reducer;\r\nexport const { addToResults } = resultsSlice.actions;\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport cardsSlice from './cardsSlice';\r\nimport timerSlice from './timerSlice';\r\nimport appSlice from './appSlice';\r\nimport gameParamsSlice from './gameParamsSlice';\r\nimport resultsSlice from './resultsSlice';\r\n\r\nexport const rootReducer = combineReducers({\r\n  cards: cardsSlice,\r\n  app: appSlice,\r\n  gameParams: gameParamsSlice,\r\n  timer: timerSlice,\r\n  results: resultsSlice,\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n","export function msToTime(duration) {\r\n  let seconds = parseInt((duration / 1000) % 60);\r\n  let minutes = parseInt((duration / (1000 * 60)) % 60);\r\n\r\n  minutes = minutes < 10 ? '0' + minutes : minutes;\r\n  seconds = seconds < 10 ? '0' + seconds : seconds;\r\n\r\n  return minutes + ':' + seconds;\r\n}\r\n","import React from 'react';\r\nimport './Card.css';\r\nfunction Card({ value, disabled, index, handleCardClick, show }) {\r\n  function handleClick() {\r\n    handleCardClick(value, index);\r\n  }\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      disabled={disabled}\r\n      onClick={handleClick}\r\n      className={`card ${show && 'card_flip'}`}\r\n    >\r\n      <div className=\"card__shirt\" />\r\n      <div className=\"card__face\" draggable=\"false\">\r\n        {value}\r\n      </div>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import './Button.css';\r\n\r\nfunction Button(props) {\r\n  return (\r\n    <button onClick={props.onClick} className={`btn ${props.isSmallTitle && 'btn_text_small'}`}>\r\n      {props.title}\r\n    </button>\r\n  );\r\n}\r\nexport default Button;\r\n","export default __webpack_public_path__ + \"static/media/white-cross.bed8c136.svg\";","import whiteСross from '../../images/white-cross.svg';\r\nimport './Popup.css';\r\n\r\nfunction Popup(props) {\r\n  return (\r\n    <div className={`popup ${props.isOpen ? 'popup_is-opened' : ''}`}>\r\n      <div className=\"popup__container\">\r\n        <button className=\"popup__btn-close\">\r\n          <img\r\n            className=\"popup__img-close\"\r\n            src={whiteСross}\r\n            alt=\"Закрыть форму.\"\r\n            onClick={props.close}\r\n          />\r\n        </button>\r\n        <h2 className=\"popup__title\">{props.title}</h2>\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Popup;\r\n","import Popup from '../Popup/Popup';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { closeResultPopup } from '../../redux/appSlice';\r\nimport { msToTime } from '../../utils/msToTime';\r\nimport './ResultPopup.css';\r\n\r\nfunction ResultPopup() {\r\n  const isOpenResultPopup = useSelector((state) => state.app.isOpenResultPopup);\r\n  const results = useSelector((state) => state.results.results);\r\n  const dispatch = useDispatch();\r\n\r\n  function closePopup() {\r\n    dispatch(closeResultPopup());\r\n  }\r\n\r\n  return (\r\n    <Popup title=\"Таблица результатов\" isOpen={isOpenResultPopup} close={closePopup}>\r\n      <ul className=\"popup__resuls-list\">\r\n        {results.map((data, i) => (\r\n          <div key={i} className=\"popup__resul-item\">\r\n            <p className=\"popup__resul-name\">{data.name}</p>\r\n            <p className=\"popup__resul-time\">{msToTime(data.time)}</p>\r\n          </div>\r\n        ))}\r\n      </ul>\r\n    </Popup>\r\n  );\r\n}\r\n\r\nexport default ResultPopup;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Popup from '../Popup/Popup';\r\nimport Button from '../Button/Button';\r\nimport { openResultPopup, closeWinPopup } from '../../redux/appSlice';\r\nimport { addToResults } from '../../redux/resultsSlice';\r\nimport { msToTime } from '../../utils/msToTime';\r\nimport './WinPopup.css';\r\n\r\nfunction WinPopup() {\r\n  const [name, setName] = React.useState('');\r\n\r\n  const isOpenWinPopup = useSelector((state) => state.app.isOpenWinPopup);\r\n  const pastTime = useSelector((state) => state.timer.pastTime);\r\n  const dispatch = useDispatch();\r\n\r\n  function handleClick() {\r\n    if (name.trim()) {\r\n      dispatch(addToResults({ name, time: pastTime }));\r\n      closePopup();\r\n      dispatch(openResultPopup());\r\n      setName('');\r\n    }\r\n  }\r\n\r\n  function closePopup() {\r\n    dispatch(closeWinPopup());\r\n  }\r\n\r\n  return (\r\n    <Popup title=\"Поздравляю, вы победили\" isOpen={isOpenWinPopup} close={closePopup}>\r\n      <p className=\"popup__text\">Ваш результат: {msToTime(pastTime)}</p>\r\n      <input\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        className=\"popup__input\"\r\n        placeholder=\"Введите свое имя\"\r\n        maxLength=\"15\"\r\n      />\r\n      <Button title=\"Добавить в таблицу\" onClick={handleClick} isSmallTitle={true} />\r\n    </Popup>\r\n  );\r\n}\r\n\r\nexport default WinPopup;\r\n","import React from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  showCard,\r\n  hideCards,\r\n  disableAllCards,\r\n  enableAllCards,\r\n  updataCards,\r\n} from '../../redux/cardsSlice';\r\nimport { updataPastime } from '../../redux/timerSlice';\r\nimport { openResultPopup, openWinPopup } from '../../redux/appSlice';\r\nimport {\r\n  increaseNumberMatches,\r\n  updataVerifiableCard,\r\n  cleareGameParams,\r\n} from '../../redux/gameParamsSlice';\r\nimport { emojiArray } from '../../utils/constants';\r\nimport { msToTime } from '../../utils/msToTime';\r\nimport Card from '../Card/Card';\r\nimport Button from '../Button/Button';\r\nimport ResultPopup from '../ResultPopup/ResultPopup';\r\nimport WinPopup from '../WinPopup/WinPopup';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [intervalTime, setIntervalTime] = React.useState(null);\r\n  const [cardHideTimer, setCardHideTimer] = React.useState(null);\r\n\r\n  const cards = useSelector((state) => state.cards.cards);\r\n  const cardsDisabled = useSelector((state) => state.cards.cardsDisabled);\r\n  const pastTime = useSelector((state) => state.timer.pastTime);\r\n  const verifiableСard = useSelector((state) => state.gameParams.verifiableСard);\r\n  const numberMatches = useSelector((state) => state.gameParams.numberMatches);\r\n  const dispatch = useDispatch();\r\n\r\n  function startGame() {\r\n    dispatch(updataCards(getArrayToDraw(emojiArray)));\r\n    dispatch(enableAllCards());\r\n    clearInterval(intervalTime);\r\n    dispatch(updataPastime(0));\r\n    const startDate = new Date();\r\n    const newIntervalTime = setInterval(() => {\r\n      dispatch(updataPastime(new Date() - startDate));\r\n    }, 1000);\r\n    setIntervalTime(newIntervalTime);\r\n  }\r\n\r\n  function getArrayToDraw(arr) {\r\n    const doubledArray = arr.concat(arr).map((value) => ({\r\n      value,\r\n      show: false,\r\n      // Создаем унакальные ключю, иначе карточки не будут перерендериться\r\n      key: nanoid(),\r\n    }));\r\n    let j, temp;\r\n    // Перемешиваем массив в случайном порядке\r\n    for (let i = doubledArray.length - 1; i > 0; i--) {\r\n      j = Math.floor(Math.random() * (i + 1));\r\n      temp = doubledArray[j];\r\n      doubledArray[j] = doubledArray[i];\r\n      doubledArray[i] = temp;\r\n    }\r\n    return doubledArray;\r\n  }\r\n\r\n  function handleCardClick(value, index) {\r\n    clearTimeout(cardHideTimer);\r\n    dispatch(showCard(index));\r\n    // Если открываем вторую карточку\r\n    if (verifiableСard) {\r\n      // Если карточки одинаковые\r\n      if (verifiableСard.value === value) {\r\n        dispatch(increaseNumberMatches());\r\n        dispatch(updataVerifiableCard(null));\r\n        // Победа\r\n        if (numberMatches + 1 === emojiArray.length) {\r\n          clearInterval(intervalTime);\r\n          dispatch(openWinPopup());\r\n          dispatch(cleareGameParams());\r\n        }\r\n      }\r\n      // Если карточки разные\r\n      else {\r\n        dispatch(disableAllCards());\r\n        setTimeout(() => {\r\n          dispatch(hideCards([index, verifiableСard.index]));\r\n          dispatch(updataVerifiableCard(null));\r\n          dispatch(enableAllCards());\r\n        }, 700);\r\n      }\r\n    }\r\n    // Если открываем первую карточку\r\n    else {\r\n      dispatch(updataVerifiableCard({ value, index }));\r\n      const newCardHideTimer = setTimeout(() => {\r\n        dispatch(updataVerifiableCard(null));\r\n        dispatch(hideCards([index]));\r\n      }, 5000);\r\n      setCardHideTimer(newCardHideTimer);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__cards-container\">\r\n        {cards.map((dataCard, i) => (\r\n          <Card\r\n            key={dataCard?.key || i}\r\n            index={i}\r\n            value={dataCard?.value || ''}\r\n            disabled={dataCard?.show || cardsDisabled}\r\n            show={dataCard?.show || false}\r\n            handleCardClick={handleCardClick}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"app__menu\">\r\n        <h1 className=\"app__title\">Игра \"Память\"</h1>\r\n\r\n        <Button onClick={startGame} title=\"Старт\" />\r\n        <p className=\"app__timer\">Таймер: {msToTime(pastTime)}</p>\r\n        <Button onClick={() => dispatch(openResultPopup())} title=\"Таблица результатов\" />\r\n      </div>\r\n      <ResultPopup />\r\n      <WinPopup />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { store } from './redux/rootReducer';\r\nimport { Provider } from 'react-redux';\r\nimport App from './components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}